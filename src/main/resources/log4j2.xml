<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/2002/xmlspec/dtd/2.10/xmlspec.dtd">
<!-- status：日志级别枚举型，控制输出Log4j事件信息，默认error，Configuration的status是log4j2本身的日志打印级别，并是不全局日志级别。而Root下的level，则恰恰是全局日志级别 -->
<!-- name： 配置名称 -->
<!-- strict：是否使用严格的XML格式。推荐使用， 规范开发者的配置编写，不支持jsonp配置 -->
<Configuration status="trace" name="LogConfig" strict="true">
	<!-- 设置配置文件全局的参数变量，用于减少自定义配置信息的重复编码 -->
	<Properties>
		<Property name="filePath">logs</Property>
		<!-- % + char/word 代表一种输出的信息或者格式 -->
		<!-- 时间：%d -->
		<!-- 类：%c -->
		<!-- 当前线程名称：%t -->
		<!-- 等级：%level，输出等级 TRACE、DEBUG、INFO、WARN、ERROR、FATAL -->
		<!-- %-5level输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补空格 -->
		<!-- 颜色格式： %highlight，%heighlight{xxx}，xxx将会带有颜色样式，并且和Level相关，一般用于debug调试信息使用 -->
		<!-- 日志内容：%msg，可添加文本样式 -->
		<!-- 换行：%n，根据操作系统的不同，最好别使用 \n、\r\n等换行符号 -->
		<Property name="consoleLogPattern">
			<![CDATA[%highlight{[%d{yyyy-MM-dd HH:mm:ss}][%t][%-5level][%c.%method]--%msg%n}{FATAL=red, ERROR=magenta, WARN=yellow, INFO=green, DEBUG=blue, TRACE=cyan}]]>
		</Property>
		<Property name="fileLogPattern">
			<![CDATA[[%d{yyyy-MM-dd HH:mm:ss}][%t][%-5level][%c.%method]--%msg%n]]>
		</Property>
	</Properties>
	<!-- 输出源，用于定义日志输出的地方 -->
	<Appenders>
		<!-- ConsoleAppender -->
		<!-- name：Appender名称 -->
		<!-- target：枚举型(SYSTEM_OUT、SYSTEM_ERR)，默认 SYSTEM_OUT -->
		<Console name="consoleAppender" target="SYSTEM_OUT">
			<!-- 输出格式，详细配置见下文 -->
			<PatternLayout>
				<Pattern>${consoleLogPattern}</Pattern>
			</PatternLayout>
		</Console>
 
		<!-- RollingFileAppender -->
		<!-- fileName：输出的文件名称，使用绝对路径确保日志位置的正确性，并且确保目录有进程用户可写权限 -->
		<!-- filePattern：日志回滚的文件命名规则 -->
		<!-- TriggeringPolicy决定是否应该执行rollover的操作，而RolloverStrategy定义了应该如何完成rollover，如果RolloverStrategy没有配置的话，RollingFileAppender将使用DefaultRolloverStrategy -->
 
		<!-- 归档存储的目录是基于当前年和月的，并且会以gzip方式进行压缩每个归档，而且rollover是每天发生一次或者达到指定文件大小发生一次 -->
		<!-- 删除匹配*/log-*.log.gz而且超过30天或更早的文件 -->
		<RollingFile name="rollingFileAppender" fileName="${filePath}/log.log"
			filePattern="${filePath}/$${date:yyyy-MM}/log-%d{dd日HH时mm分ss秒}-%i.log.gz">
			<!-- 输出格式，详细配置见下文 -->
			<PatternLayout>
				<Pattern>${fileLogPattern}</Pattern>
			</PatternLayout>
			<Policies>
				<!-- 每天的午夜触发 -->
				<CronTriggeringPolicy schedule="0 0 0 * * ?" />
				<!-- 此处为每个文件大小策略限制，使用它一般会在文件中filePattern采用%i模式 -->
				<SizeBasedTriggeringPolicy size="10 MB" />
			</Policies>
			<!-- 最多记录100个归档 -->
			<DefaultRolloverStrategy max="100">
				<!-- 最多备份30天以内的日志，此处为策略限制，Delete中可以按自己需要用正则表达式编写 -->
				<Delete basePath="${filePath}" maxDepth="2">
					<IfFileName glob="*/log-*.log.gz" />
					<IfLastModified age="30d" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingFile>
	</Appenders>
	<!-- 日志记录器 -->
	<Loggers>
		<!-- name：必填且唯一 -->
		<!-- level：设置输出最低级别，默认error -->
		<!-- additivity：是否在父Logger输出，默认true -->
		<!-- 记录指定包的日志 -->
		<Logger name="org.springframework" level="info" additivity="false">
			<AppenderRef ref="consoleAppender" />
		</Logger>
		<Logger name="com.transfar" level="info" additivity="false">
			<AppenderRef ref="consoleAppender" />
			<AppenderRef ref="rollingFileAppender" />
		</Logger>
		<!-- 必须包含一个 Root元素，不设置 Root元素，将会默认使用类似如下的配置 -->
		<Root level="info">
			<AppenderRef ref="consoleAppender" />
			<AppenderRef ref="rollingFileAppender" />
		</Root>
	</Loggers>
</Configuration>

